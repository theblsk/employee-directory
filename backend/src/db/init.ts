import { db, sqlite } from "./client";
import { departments, employees } from "./schema";
import departmentsSeed from "../data/departments.seed.json" assert { type: "json" };
import employeesSeed from "../data/employees.seed.json" assert { type: "json" };

/**
 * Seeds the local SQLite database with demo data for the employee directory.
 * - Creates tables if they do not exist.
 * - Inserts departments from constants if the table is empty.
 * - Fetches and inserts demo employees if the employees table is empty.
 * This function is intended for local/demo use and runs at server startup.
 */
export async function migrateAndSeedIfEmpty() {
  try {
    sqlite.exec(
      `CREATE TABLE IF NOT EXISTS departments (
        id integer primary key autoincrement,
        name text not null unique
      );`
    );
    sqlite.exec(
      `CREATE TABLE IF NOT EXISTS employees (
        id integer primary key autoincrement,
        uuid text not null unique,
        name text not null,
        title text not null,
        email text not null,
        location text not null,
        avatar text,
        department_id integer not null references departments(id)
      );`
    );

    const existingDepartments = await db.select().from(departments).limit(1);
    if (existingDepartments.length === 0) {
      await db.insert(departments).values(
        (departmentsSeed as Array<{ id: number; name: string }>).map(({ id, name }) => ({ id, name }))
      );
    }

    const existingEmployees = await db.select().from(employees).limit(1);
    if (existingEmployees.length > 0) return;

    const departmentRows = await db.select().from(departments);
    const employeesData = employeesSeed as Array<{
      uuid: string;
      name: string;
      title: string;
      email: string;
      location: string;
      avatar: string | null;
      departmentId: number;
    }>;

    const departmentIds: number[] = departmentRows.map((department) => department.id);
    if (departmentIds.length === 0) {
      throw new Error("No departments found after initialization");
    }
    // Utility to get the department id from the random department name generated by seedEmployeesFromRandomUser
    const getDepartmentIdByIndex = (index: number): number => departmentIds[index % departmentIds.length] as number;

    await db.insert(employees).values(
      employeesData.map((employee) => ({
        uuid: String(employee.uuid),
        name: String(employee.name),
        title: String(employee.title),
        email: String(employee.email),
        location: String(employee.location),
        avatar: employee.avatar === null ? null : String(employee.avatar),
        departmentId: Number(employee.departmentId),
      }))
    );
  } catch (error) {
    const err = error as unknown as Record<string, unknown>;
    const detailed = {
      name: (err as any)?.name,
      message: (err as any)?.message,
      stack: (err as any)?.stack,
      cause: (err as any)?.cause,
      errorString: String(error),
    };
    console.error("migrateAndSeedIfEmpty failed with error:", detailed);
    throw error;
  }
}


